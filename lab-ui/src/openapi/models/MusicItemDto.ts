/* tslint:disable */
/* eslint-disable */
/**
 * Music Lab
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TagDto } from './TagDto';
import {
    TagDtoFromJSON,
    TagDtoFromJSONTyped,
    TagDtoToJSON,
} from './TagDto';

/**
 * 
 * @export
 * @interface MusicItemDto
 */
export interface MusicItemDto {
    /**
     * 
     * @type {string}
     * @memberof MusicItemDto
     */
    file: string;
    /**
     * 
     * @type {boolean}
     * @memberof MusicItemDto
     */
    isFolder: boolean;
    /**
     * 
     * @type {string}
     * @memberof MusicItemDto
     */
    parent: string;
    /**
     * tags of music
     * @type {Array<TagDto>}
     * @memberof MusicItemDto
     */
    tags?: Array<TagDto>;
}

/**
 * Check if a given object implements the MusicItemDto interface.
 */
export function instanceOfMusicItemDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "file" in value;
    isInstance = isInstance && "isFolder" in value;
    isInstance = isInstance && "parent" in value;

    return isInstance;
}

export function MusicItemDtoFromJSON(json: any): MusicItemDto {
    return MusicItemDtoFromJSONTyped(json, false);
}

export function MusicItemDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MusicItemDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'file': json['file'],
        'isFolder': json['is_folder'],
        'parent': json['parent'],
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagDtoFromJSON)),
    };
}

export function MusicItemDtoToJSON(value?: MusicItemDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'file': value.file,
        'is_folder': value.isFolder,
        'parent': value.parent,
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagDtoToJSON)),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Music Lab
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MusicErrorResponse,
  MusicItemDto,
  MusicListResponse,
  MusicTagBody,
  MusicUnTagBody,
  TagDto,
  UnprocessableEntity,
} from '../models';
import {
    MusicErrorResponseFromJSON,
    MusicErrorResponseToJSON,
    MusicItemDtoFromJSON,
    MusicItemDtoToJSON,
    MusicListResponseFromJSON,
    MusicListResponseToJSON,
    MusicTagBodyFromJSON,
    MusicTagBodyToJSON,
    MusicUnTagBodyFromJSON,
    MusicUnTagBodyToJSON,
    TagDtoFromJSON,
    TagDtoToJSON,
    UnprocessableEntityFromJSON,
    UnprocessableEntityToJSON,
} from '../models';

export interface DeleteMusicTagTagDeleteRequest {
    musicUnTagBody?: MusicUnTagBody;
}

export interface MusicDownloadDownloadFileGetRequest {
    file: string;
}

export interface MusicListGetRequest {
    folder?: string;
    tags?: Array<number>;
}

export interface UpdateMusicTagTagPostRequest {
    musicTagBody?: MusicTagBody;
}

export interface UpdateTagTagIntIdPutRequest {
    id: number;
    tagDto?: TagDto;
}

/**
 * 
 */
export class MusicApi extends runtime.BaseAPI {

    /**
     */
    async deleteMusicTagTagDeleteRaw(requestParameters: DeleteMusicTagTagDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MusicItemDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/music/tag`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: MusicUnTagBodyToJSON(requestParameters.musicUnTagBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MusicItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async deleteMusicTagTagDelete(requestParameters: DeleteMusicTagTagDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MusicItemDto> {
        const response = await this.deleteMusicTagTagDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async musicDownloadDownloadFileGetRaw(requestParameters: MusicDownloadDownloadFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling musicDownloadDownloadFileGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/music/download/{file}`.replace(`{${"file"}}`, encodeURIComponent(String(requestParameters.file))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async musicDownloadDownloadFileGet(requestParameters: MusicDownloadDownloadFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.musicDownloadDownloadFileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async musicListGetRaw(requestParameters: MusicListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MusicListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.folder !== undefined) {
            queryParameters['folder'] = requestParameters.folder;
        }

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/music/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MusicListResponseFromJSON(jsonValue));
    }

    /**
     */
    async musicListGet(requestParameters: MusicListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MusicListResponse> {
        const response = await this.musicListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateMusicTagTagPostRaw(requestParameters: UpdateMusicTagTagPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MusicItemDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/music/tag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MusicTagBodyToJSON(requestParameters.musicTagBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MusicItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateMusicTagTagPost(requestParameters: UpdateMusicTagTagPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MusicItemDto> {
        const response = await this.updateMusicTagTagPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTagTagIntIdPutRaw(requestParameters: UpdateTagTagIntIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTagTagIntIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/music/tag/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagDtoToJSON(requestParameters.tagDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateTagTagIntIdPut(requestParameters: UpdateTagTagIntIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagDto> {
        const response = await this.updateTagTagIntIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
